{"version":3,"sources":["components/SearchBox/searchBox.module.css","api/mockServer.js","components/SearchBox/SearchBox.jsx","components/SearchBox/index.js","helper/debounce.js","App.js","index.js"],"names":["module","exports","getRandomBool","n","maxRandomCoeff","Math","floor","random","SearchBox","useState","suggestion","setSuggestions","inputValue","setInputValue","searchedValue","setSearchedValue","highlightedIndex","setHighlightedIndex","showList","setShowList","node","useRef","handleClick","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","debounce","useCallback","callbackFunction","timeout","timer","params","window","clearTimeout","setTimeout","debouncer","text","console","log","post","results","push","Promise","resolve","reject","randomTimeout","getSuggestions","then","response","catch","error","handleOnClick","listValue","replace","RegExp","className","styles","searchWrapper","boxHeading","inputField","type","value","onChange","searchValue","recentSearchValue","trim","slice","lastIndexOf","length","onClick","onKeyDown","e","code","preventDefault","prev","ref","suggestions","map","index","highlighted","currentTarget","innerText","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70ac524f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"suggestions\":\"searchBox_suggestions__1IdeO\",\"highlighted\":\"searchBox_highlighted__2hs1h\",\"inputField\":\"searchBox_inputField__15vq3\",\"searchWrapper\":\"searchBox_searchWrapper__3wvMx\",\"boxHeading\":\"searchBox_boxHeading__2bX8I\"};","// ================================= Mock Server Start =============================\nvar FAILURE_COEFF = 10;\nvar MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  var maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nexport function getSuggestions(text) {\n  var pre = 'pre';\n  var post = 'post';\n  var results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    var randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n// ================================= Mock Server End =============================","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport styles from './searchBox.module.css';\nimport { debouncer } from '../../helper/debounce';\nimport { getSuggestions } from \"../../api/mockServer\";\n\nconst SearchBox = () => {\n  const [suggestion, setSuggestions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchedValue, setSearchedValue] = useState(\"\");\n  const [highlightedIndex, setHighlightedIndex] = useState(0)\n  const [showList, setShowList] = useState(true);\n  const node = useRef();\n\n  // This handles the mouse click events for suggestion list\n  const handleClick = event => {\n    if (node.current && node.current.contains(event.target)) {\n      return;\n    }\n    setShowList(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, [node]);\n\n  const getDataFromApi = (text) => {\n    console.log('Text:  ', text)\n    getSuggestions(text)\n    .then(response => {\n      setSuggestions(response);\n      setHighlightedIndex(0);\n    })\n    .catch(error => console.log(error));\n  }\n\n  const debounce = useCallback(debouncer(getDataFromApi, 500), []);\n\n  const handleOnChange = (event) => {\n    const searchValue = event.target.value;\n    setInputValue(searchValue);\n    // Below gives the recent searching value for filtering suggestions\n    const recentSearchValue = searchValue.trim().slice(searchValue.lastIndexOf(' ') + 1, searchValue.length);\n\n    debounce(recentSearchValue);\n    setSearchedValue(recentSearchValue);\n  }\n\n  const handleOnClick = (listValue) => {\n    // Below replaces the typed search(last text after white space)\n    // with the clicked list value\n    setInputValue(inputValue.replace(new RegExp(searchedValue + '$'), `${listValue} `));\n  }\n\n  const onKeyDown = (e) => {\n    if(!inputValue || suggestion.length === 0) {\n      return\n    }\n    switch(e.code) {\n      case 'ArrowDown':\n        e.preventDefault();\n        if (highlightedIndex < suggestion.length - 1) setHighlightedIndex(prev => prev + 1);\n        return;\n      case 'ArrowUp':\n        e.preventDefault();\n        if (highlightedIndex !== 0) setHighlightedIndex(prev => prev - 1);\n        return;\n      case 'Enter':\n        handleOnClick(suggestion[highlightedIndex]);\n        setHighlightedIndex(0);\n          return;\n      default: \n        return;\n    }\n  }\n\n  return (\n    <div className={styles.searchWrapper}>\n      <h2 className={styles.boxHeading}>\n        Enter a value\n      </h2>\n      <input\n        className={styles.inputField}\n        type=\"text\"\n        value={inputValue}\n        onChange={handleOnChange}\n        onClick={() => setShowList(true)}\n        onKeyDown={onKeyDown}\n      />\n      {\n        /*\n        The below conditions are to check\n        last character in search field is not a white space,\n        suggestion list is not empty,\n        value is entered or not and\n        if mouse is clicked outside the list (to close suggestions list)\n        */\n        inputValue.slice(-1) !== \" \" && suggestion.length > 0 && inputValue.trim() !== \"\"\n        && showList && (\n          <ul ref={node} className={styles.suggestions}>\n            {suggestion.map((suggestions, index) => (\n              <li \n                className={highlightedIndex === index ? styles.highlighted : \"\"}\n                key={index}\n                onClick={(event) => handleOnClick(event.currentTarget.innerText)}\n              >\n                {suggestions}\n              </li>\n            ))}\n          </ul>\n        )\n      }\n    </div >\n  )\n}\n\nexport default SearchBox\n","import SearchBox from './SearchBox';\n\nexport default SearchBox;\n","export function debouncer(callbackFunction, timeout) {\n  let timer = null;\n\n  return (...params) => {\n    if (timer)\n      window.clearTimeout(timer);\n\n    timer = window.setTimeout(() => {\n      callbackFunction(...params)\n    }, timeout)\n  }\n}\n","import SearchBox from './components/SearchBox'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBox />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}